import os
import glob
import subprocess
from src.GeneralUtilityMethods import GUM
from src.Paths import Paths


class Agadir(object):

    def __init__(self, use_cluster, use_multithread=False):
        Paths.set_up_paths(use_cluster)

        # NOTE: AT SOME I SHOULD ALSO WRITE A LINUX COMMAND TO COPY THIS AND ANY OTHER MODULES NEEDED TO THE CLUSTER IF
        # THE use_cluster FLAG IS SET TO TRUE. AND THIS SHOULD BE THE CASE FOR ANY MODULE (BUT POTENTIALLY FROM AND
        # WITHIN MAIN.PY RATHER THAN WITHIN EACH MODULE.

        # filename list should be taken from the parse global_options file. For now it is left as default (None).
        # self.copy_files_output_to_input_fastasubdirs(Paths.OUTPUT_FASTAS, Paths.INPUT_FASTAS)
        # self.compute(Paths.INPUT_FASTAS)

    # Copies fastafiles from subdirectories of output_data (generated by MutateFasta) to subdirs of input_data.
    # Typically, from ../output_data/fastas/<fastafilename>/mutants/. to ../input_data/fastas/<fastafilename>/mutants
    #
    # path_output_fastas    String      Source directory of files to be copied.
    # path_input_fastas     String      Destintion directory of files to be copied.
    # filenamelist          List        Names of files to copy (if not all output_fastas dir), None by default.
    def copy_files_output_to_input_fastasubdirs(self, path_output_fastas, path_input_fastas, filename_list=None,
                                                into_own_subdirs=True):
        if filename_list is not None:
            path_fastas_filelist = [path_output_fastas + '/' + filename + '/' + filename + '.fasta' for filename in
                                    filename_list]
            GUM.linux_copy_files(path_fastas_filelist, path_input_fastas, into_own_subdirs)
        else:
            path_input_fastas_list = path_input_fastas.split('/')
            path_input_list = path_input_fastas_list[:-1]
            path_input = '/'.join(path_input_list)
            GUM.linux_copy_all_files_in_dir(path_output_fastas, path_input, recursively=True)
            if into_own_subdirs:
                GUM._move_files_into_own_subdirs(path_dir=path_input_fastas)

    # Runs Agadirwrapper according to the options specified in /configuration/agadir_config/Options.txt file.
    def compute(self, path_input_fastas, path_output):
        path_input_fastas_files = glob.glob(path_input_fastas + '/**/*.fasta')
        for path_input_fastas_file in path_input_fastas_files:
            fastaname = path_input_fastas_file.split('/')[-1].split('.')[0]
            path_output_agadir_fastaname = GUM._os_makedirs(path_output, Paths.DIR_AGADIR.value, fastaname)
            os.chdir(Paths.AGADIR_EXE)
            cmd = 'chmod 111 agadirwrapper'
            try:
                subprocess.call(cmd, shell=True)
            except OSError:
                print('Problem with linux cp command.')
            os.chdir(path_output_agadir_fastaname)
            cmd = Paths.AGADIR_EXE + '/agadirwrapper' + GUM.space + path_input_fastas_file + GUM.space + \
                  Paths.CONFIG_AGAD + '/Options.txt'
            # path_bash_agadir_sh = os.path.join(Paths.BASH, 'agadirexe.sh')
            # with open(path_bash_agadir_sh, 'w') as f:
            #     f.write(execute)
            # cmd = 'sh' + GUM.space + path_bash_agadir_sh
            try:
                subprocess.call(cmd, shell=True)
            except OSError:
                print('Problem with linux cp command.')
            # os.chdir(self.path_Results_pdbname)

    def write_agadir_options_file(self):
        print('')
