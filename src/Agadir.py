import os
import glob
import subprocess
from src.Str import Str
from src.Cluster import Cluster
from src.GeneralUtilityMethods import GUM
from src.Paths import Paths
from enum import Enum


class Agadir(object):

    def __init__(self, conditions):
        self.temp = conditions['temp']
        self.ph = conditions['ph']
        self.ion_strgth = conditions['ion_strgth']
        self.tfe = conditions['tfe']
        self.stab = conditions['stab']
        self.conc = conditions['conc']

    # Copies fastafiles from subdirectories of output_data (e.g. generated by MutateFasta) to subdirs of input_data.
    # Typically, from ../output_data/fastas/<fastafilename>/mutants/. to ../input_data/fastas/<fastafilename>/mutants
    #
    # path_output_fastas    String      Source directory of files to be copied.
    # path_input_fastas     String      Destintion directory of files to be copied.
    # filenamelist          List        Names of files to copy (if not all output_fastas dir), None by default.
    def copy_files_output_to_input_fastasubdirs(self, path_output_fastas, path_input_fastas, filename_list=None,
                                                into_own_subdirs=True):
        if filename_list is not None:
            path_fastas_filelist = [path_output_fastas + '/' + filename + '/' + filename + '.fasta' for filename in
                                    filename_list]
            GUM.linux_copy_files(path_fastas_filelist, path_input_fastas, into_own_subdirs)
        else:
            path_input_fastas_list = path_input_fastas.split('/')
            path_input_list = path_input_fastas_list[:-1]
            path_input = '/'.join(path_input_list)
            GUM.linux_copy_all_files_in_dir(path_output_fastas, path_input, recursively=True)
            if into_own_subdirs:
                GUM._move_files_into_own_subdirs(path_dir=path_input_fastas)

    # Runs Agadirwrapper according to the options specified in /configuration/agadir_config/Options.txt file.
    # Expecting path_fastafile to potentially contain more than 1 sequence.
    def compute(self, path_fastafile, path_output_agadir_3dots):
        with open(path_fastafile, 'r') as f:
            fasta_str = ''
            end_of_fasta = False

            # self.write_1_fastafile_per_fasta_from_multifastafile(path_fastafile)
            #         fastaname = path_input_fastafile.split('/')[-1].split('.')[0]
            #         path_output_agadir_fastaname = GUM._os_makedirs(path_output_agadir_3dots, fastaname)
            #         os.chdir(Paths.AGADIR_EXE)
            #

                    # if GUM.using_cluster():
                    #     Cluster.write_job_q_bash(job_name=fastaname, path_job_q_dir=Paths.CONFIG_JOBQ)
                    #     Cluster.run_job_q(path_job_q_dir=Paths.CONFIG_JOBQ)
                    #     Cluster.wait_for_grid_engine_job_to_complete(grid_engine_jobname=fastaname)
                    # else:
                    #     cmd = 'chmod 100 agadirwrapper'
                    #     # cmd = 'chmod +x agadirwrapper'
                    #     try:
                    #         subprocess.call(cmd, shell=True)
                    #     except OSError:
                    #         print('Problem with linux cp command.')

                    # os.chdir(path_output_agadir_fastaname)
                    # cmd = Paths.AGADIR_EXE + '/agadirwrapper' + GUM.space + path_input_fastafile + GUM.space + \
                    #       Paths.CONFIG_AGAD + '/Options.txt'

                    # # path_bash_agadir_sh = os.path.join(Paths.BASH, 'agadirexe.sh')
                    # with open(path_bash_agadir_sh, 'w') as f:
                    #     f.write(execute)
                    # cmd = 'sh' + GUM.space + path_bash_agadir_sh

                    # try:
                    #     subprocess.call(cmd, shell=True)
                    # except OSError:
                    #     print('Problem with linux cp command.')

                    # # os.chdir(self.path_Results_pdbname)

    # There are 3 types of calculations and xx algorithms which this can be applied to.
    # 1) Global total; 2) Window calculation; 3) Residue calculation. Global is ..... Window is..... Residue is .....
    #
    # temp                      float   temperature in Kelvin. 298.0 by default (24.85 degC. 37 degC is 310.15 K).
    # pH                        float   pH. 7.5 by default.
    # ion_strgth                float   ionic strength in Molar. 0.150 M by default.
    # tfe                       float   Trifluoroethanol concentration in Molar, 0 M by default.
    # stab                      float   Stability .. ?
    # conc                      float   Concentration of the peptide, 1.0 M by default.
    # ntrm                      ?       ?
    # ctrm                      ?       ?
    # global_tot                String  'true' to include global total calculations.
    # tango_wndw                "       'true' to include Tango window calculations.
    # waltz_wndw                "       'true' to include Waltz window calculations.
    # agadir_wndw               "       'true' to include Agadir window calculations.
    # limbo_wndw                "       'true' to include Limbo window calculations.
    # csblnca_wndw              "       'true' to include Casablanca window calculations. ??
    # complex_wndw              "       'true' to include Complex window calculations. ??
    # repeat_wndw               "       'true' to include Repeat window calculations. ??
    # pat_tango_wndw            "       'true' to include Tango window calculations.
    # tango_resid               "       'true' to include Tango window calculations.
    # waltz_resid               "       'true' to include Tango window calculations.
    # limbo_resid               "       'true' to include Tango window calculations.
    # complex_resid             "       'true' to include Tango window calculations.
    # agadir_resid              "       'true' to include Tango window calculations.
    # csblnca_resid             "       'true' to include Tango window calculations.
    # repeat_resid              "       'true' to include Tango window calculations.
    # wndws_file_per_seq        "       'true' to include Tango window calculations.
    # resid_file_per_seq        "       'true' to include Tango window calculations.
    def write_agadir_options_file(self, temp, ph, ion_strgth, tfe, stab, conc, ntrm='#', ctrm='#',
                                  global_tot=Str.T.value, tango_wndw=Str.T.value, waltz_wndw=Str.T.value,
                                  limbo_wndw=Str.F.value, agadir_wndw=Str.F.value, csblnca_wndw=Str.F.value,
                                  complex_wndw=Str.F.value, repeat_wndw=Str.F.value,
                                  pat_tango_wndw=Str.F.value, tango_resid=Str.F.value,
                                  waltz_resid=Str.F.value, limbo_resid=Str.F.value, complex_resid=Str.F.value,
                                  agadir_resid=Str.F.value, csblnca_resid=Str.F.value,
                                  repeat_resid=Str.F.value, wndws_file_per_seq=Str.F.value,
                                  resid_file_per_seq=Str.F.value):
        options = []
        options.append('<TITLE>AGADIR_optionfile' + Str.SEMICO_NL.value)
        options.append('<Temperature>' + str(temp=self.temp) + '.' + Str.SEMICO_NL.value)
        options.append('<pH>' + str(ph=self.ph) + Str.SEMICO_NL.value)
        options.append('<IonStrength>' + str(ion_strgth=self.ion_strgth) + Str.SEMICO_NL.value)
        options.append('<TfeConc>' + str(tfe=self.tfe) + '.' + Str.SEMICO_NL.value)
        options.append('<Stability>' + str(stab=self.stab) + '.' + Str.SEMICO_NL.value)
        options.append('<Concentration>' + str(conc=self.conc) + '.' + Str.SEMICO_NL.value)
        options.append('<Nterm>' + ntrm + Str.SEMICO_NL.value)
        options.append('<Cterm>' + ctrm + Str.SEMICO_NL.value)
        options.append('<global_total>' + global_tot + Str.SEMICO_NL.value)
        options.append('<tango_window>' + tango_wndw + Str.SEMICO_NL.value)
        options.append('<waltz_window>' + waltz_wndw + Str.SEMICO_NL.value)
        options.append('<limbo_window>' + limbo_wndw + Str.SEMICO_NL.value)
        options.append('<agadir_window>' + agadir_wndw + Str.SEMICO_NL.value)
        options.append('<casablanca_window>' + csblnca_wndw + Str.SEMICO_NL.value)
        options.append('<complex_window>' + complex_wndw + Str.SEMICO_NL.value)
        options.append('<repeat_window>' + repeat_wndw + Str.SEMICO_NL.value)
        options.append('<patentTango_window>' + pat_tango_wndw + Str.SEMICO_NL.value)
        options.append('<tango_residue>' + tango_resid + Str.SEMICO_NL.value)
        options.append('<waltz_residue>' + waltz_resid + Str.SEMICO_NL.value)
        options.append('<limbo_residue>' + limbo_resid + Str.SEMICO_NL.value)
        options.append('<complex_residue>' + complex_resid + Str.SEMICO_NL.value)
        options.append('<agadir_residue>' + agadir_resid + Str.SEMICO_NL.value)
        options.append('<casablanca_residue>' + csblnca_resid + Str.SEMICO_NL.value)
        options.append('<repeat_residue>' + repeat_resid + Str.SEMICO_NL.value)
        options.append('<windows_file_per_sequence>' + wndws_file_per_seq + Str.SEMICO_NL.value)
        options.append('<residue_file_per_sequence>' + resid_file_per_seq + Str.SEMICO_NL.value)
        options.append('<END>' + Str.NEWLN.value)
        with open(Paths.CONFIG_AGAD + '/Options.txt', 'w') as agadir_options:
            options_str = ''.join(options)
            agadir_options.write(options_str)
        return options_str


class AgadCndtns(Enum):
    # cytoplasm and nucleus had a pH of ≈7.3, mitochondria ≈8.0, ER ≈7.5 and Golgi ≈6.6
    INCELL_MAML = {'temp': 310.15, 'ph': 7.4, 'ion_strgth': 0.15, 'tfe': 0, 'stab': 0, 'conc': 1}
    # OUTCELL_MAML = {'temp': 310.15, 'pH': 7?}
    INVITRO_COND1 = {'temp': 298.15, 'ph': 7.5, 'ion_strgth': 0.15, 'tfe': 0, 'stab': 0, 'conc': 1}
    # ETC
