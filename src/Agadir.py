import os
import glob
import subprocess
from src.Str import Str
from src.Cluster import Cluster
from src.GeneralUtilityMethods import GUM
from src.Paths import Paths


class Agadir(object):

    def __init__(self, use_cluster, use_multithread=False):
        Paths.set_up_paths(use_cluster)

        # NOTE: AT SOME I SHOULD ALSO WRITE A LINUX COMMAND TO COPY THIS AND ANY OTHER MODULES NEEDED TO THE CLUSTER IF
        # THE use_cluster FLAG IS SET TO TRUE. AND THIS SHOULD BE THE CASE FOR ANY MODULE (BUT POTENTIALLY FROM AND
        # WITHIN MAIN.PY RATHER THAN WITHIN EACH MODULE.

        # filename list should be taken from the parse global_options file. For now it is left as default (None).
        # self.copy_files_output_to_input_fastasubdirs(Paths.OUTPUT_FASTAS, Paths.INPUT_FASTAS)
        # self.compute(Paths.INPUT_FASTAS)

    # Copies fastafiles from subdirectories of output_data (generated by MutateFasta) to subdirs of input_data.
    # Typically, from ../output_data/fastas/<fastafilename>/mutants/. to ../input_data/fastas/<fastafilename>/mutants
    #
    # path_output_fastas    String      Source directory of files to be copied.
    # path_input_fastas     String      Destintion directory of files to be copied.
    # filenamelist          List        Names of files to copy (if not all output_fastas dir), None by default.
    def copy_files_output_to_input_fastasubdirs(self, path_output_fastas, path_input_fastas, filename_list=None,
                                                into_own_subdirs=True):
        if filename_list is not None:
            path_fastas_filelist = [path_output_fastas + '/' + filename + '/' + filename + '.fasta' for filename in
                                    filename_list]
            GUM.linux_copy_files(path_fastas_filelist, path_input_fastas, into_own_subdirs)
        else:
            path_input_fastas_list = path_input_fastas.split('/')
            path_input_list = path_input_fastas_list[:-1]
            path_input = '/'.join(path_input_list)
            GUM.linux_copy_all_files_in_dir(path_output_fastas, path_input, recursively=True)
            if into_own_subdirs:
                GUM._move_files_into_own_subdirs(path_dir=path_input_fastas)

    # Runs Agadirwrapper according to the options specified in /configuration/agadir_config/Options.txt file.
    def compute(self, path_input_fastas, path_output):
        path_input_fastas_files = glob.glob(path_input_fastas + '/**/*.fasta')
        for path_input_fastas_file in path_input_fastas_files:
            fastaname = path_input_fastas_file.split('/')[-1].split('.')[0]
            path_output_agadir_fastaname = GUM._os_makedirs(path_output, Paths.DIR_AGADIR.value, fastaname)
            os.chdir(Paths.AGADIR_EXE)
            if GUM.using_cluster():
                Cluster.write_job_q_bash(job_name=fastaname, path_job_q_dir=Paths.CONFIG_JOBQ)
                Cluster.run_job_q(path_job_q_dir=Paths.CONFIG_JOBQ)
                Cluster.wait_for_grid_engine_job_to_complete(grid_engine_jobname=fastaname)
            else:
                cmd = 'chmod 100 agadirwrapper'
                # cmd = 'chmod +x agadirwrapper'
                try:
                    subprocess.call(cmd, shell=True)
                except OSError:
                    print('Problem with linux cp command.')

                os.chdir(path_output_agadir_fastaname)
                cmd = Paths.AGADIR_EXE + '/agadirwrapper' + GUM.space + path_input_fastas_file + GUM.space + \
                      Paths.CONFIG_AGAD + '/Options.txt'
                # path_bash_agadir_sh = os.path.join(Paths.BASH, 'agadirexe.sh')
                # with open(path_bash_agadir_sh, 'w') as f:
                #     f.write(execute)
                # cmd = 'sh' + GUM.space + path_bash_agadir_sh
                try:
                    subprocess.call(cmd, shell=True)
                except OSError:
                    print('Problem with linux cp command.')
                # os.chdir(self.path_Results_pdbname)

    # temp                      float
    # pH                        float
    # ion_strgth                float
    # tfe                       float
    # stab                      float
    # conc                      float
    # ntrm                      ?
    # ctrm                      ?
    # global_tot                String  true/false
    # tango_wndw                String  true/false
    # waltz_wndw                String  true/false
    # limbo_wndw                String  true/false
    # agadir_wndw               String  true/false
    # csblnca_wndw              String  true/false
    # complex_wndw              String  true/false
    # repeat_wndw               String  true/false
    # pat_tango_wndw             String  true/false
    # tango_resid               String  true/false
    # waltz_resid               String  true/false
    # limbo_resid               String  true/false
    # complex_resid             String  true/false
    # agadir_resid              String  true/false
    # csblnca_resid             String  true/false
    # repeat_resid              String  true/false
    # wndws_file_per_seq        String  true/false
    # resid_file_per_seq        String  true/false
    def write_agadir_options_file(self, temp=298, pH=7.5, ion_strgth=0.150, tfe=0, stab=0, conc=1, ntrm='#', ctrm='#',
                                  global_tot=Str.T.value, tango_wndw=Str.T.value, waltz_wndw=Str.T.value,
                                  limbo_wndw=Str.F.value, agadir_wndw=Str.F.value, csblnca_wndw=Str.F.value,
                                  complex_wndw=Str.F.value, repeat_wndw=Str.F.value,
                                  pat_tango_wndw=Str.F.value, tango_resid=Str.F.value,
                                  waltz_resid=Str.F.value, limbo_resid=Str.F.value, complex_resid=Str.F.value,
                                  agadir_resid=Str.F.value, csblnca_resid=Str.F.value,
                                  repeat_resid=Str.F.value, wndws_file_per_seq=Str.F.value,
                                  resid_file_per_seq=Str.F.value):
        options = []
        options.append('<TITLE>AGADIR_optionfile' + Str.SEMICO_NL.value)
        options.append('<Temperature>' + str(temp) + '.' + Str.SEMICO_NL.value)
        options.append('<pH>' + str(pH) + Str.SEMICO_NL.value)
        options.append('<IonStrength>' + str(ion_strgth) + Str.SEMICO_NL.value)
        options.append('<TfeConc>' + str(tfe) + '.' + Str.SEMICO_NL.value)
        options.append('<Stability>' + str(stab) + '.' + Str.SEMICO_NL.value)
        options.append('<Concentration>' + str(conc) + '.' + Str.SEMICO_NL.value)
        options.append('<Nterm>' + ntrm + Str.SEMICO_NL.value)
        options.append('<Cterm>' + ctrm + Str.SEMICO_NL.value)
        options.append('<global_total>' + global_tot + Str.SEMICO_NL.value)
        options.append('<tango_window>' + tango_wndw + Str.SEMICO_NL.value)
        options.append('<waltz_window>true' + waltz_wndw + Str.SEMICO_NL.value)
        options.append('<limbo_window>false' + limbo_wndw + Str.SEMICO_NL.value)
        options.append('<agadir_window>false' + agadir_wndw + Str.SEMICO_NL.value)
        options.append('<casablanca_window>false' + csblnca_wndw + Str.SEMICO_NL.value)
        options.append('<complex_window>false' + complex_wndw + Str.SEMICO_NL.value)
        options.append('<repeat_window>false' + repeat_wndw + Str.SEMICO_NL.value)
        options.append('<patentTango_window>false' + pat_tango_wndw + Str.SEMICO_NL.value)
        options.append('<tango_residue>false' + tango_resid + Str.SEMICO_NL.value)
        options.append('<waltz_residue>false' + waltz_resid + Str.SEMICO_NL.value)
        options.append('<limbo_residue>false' + limbo_resid + Str.SEMICO_NL.value)
        options.append('<complex_residue>false' + complex_resid + Str.SEMICO_NL.value)
        options.append('<agadir_residue>false' + agadir_resid + Str.SEMICO_NL.value)
        options.append('<casablanca_residue>false' + csblnca_resid + Str.SEMICO_NL.value)
        options.append('<repeat_residue>false' + repeat_resid + Str.SEMICO_NL.value)
        options.append('<windows_file_per_sequence>false' + wndws_file_per_seq + Str.SEMICO_NL.value)
        options.append('<residue_file_per_sequence>false' + resid_file_per_seq + Str.SEMICO_NL.value)
        options.append('<END>' + Str.NEWLN.value)
        with open(Paths.CONFIG_AGAD + '/Options.txt', 'w') as agadir_options:
            options_str = ''.join(options)
            agadir_options.write(options_str)
        return options_str
